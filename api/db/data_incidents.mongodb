//}🚧🔗 Creation of the autoincrementables management collection 🔗🚧

use("Campus_incidents");
db.createCollection("autoincrement");
db.autoincrement.insertMany([
    { _id: "AreaId", sequence_value: 0 },
    { _id: "ClassroomId", sequence_value: 0 },
    { _id: "Category_IncId", sequence_value: 0 },
    { _id: "Type_IncId", sequence_value: 0 },
    { _id: "Document_typeId", sequence_value: 0 },
    { _id: "GenderId", sequence_value: 0 },
    { _id: "Comp_StatusId", sequence_value: 0 },
    { _id: "IncidentsId", sequence_value: 0 },
    { _id: "UserId", sequence_value: 0 },
    { _id: "ComputersId", sequence_value: 0 },
    { _id: "KeyboardsId", sequence_value: 0 },
    { _id: "MousesId", sequence_value: 0 },
    { _id: "Diadems_GamersId", sequence_value: 0 },
    { _id: "ScreensId", sequence_value: 0 }
]);

//🪓🔎Injection of documents for Area collection 🔎🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}
db.Area.insertMany([
    {
      _id: Number(increment("Area")),
      A_Name: "Area Training",
      A_Description: "Programming skills training area, in which the Apollo, Artemis, spunikt and SkyLab classrooms are located."
    },
    {
        _id: Number(increment("Area")),
        A_Name: "Area Review 1",
        A_Description: "First autonomous learning area, in which the Corvus room is located."
    },
    {
        _id: Number(increment("Area")),
        A_Name: "Area Review 2",
        A_Description: "Second autonomous learning area, in which the Endor room is located."
    },
    {
        _id: Number(increment("Area")),
        A_Name: "Auditorium",
        A_Description: "auditorium, used for events and also used for English and social skills classes."
    }
]);

//🪓🔎Injection of documents for Category_Inc collection 🔎🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}   
db.Category_Inc.insertMany([
    {
        _id: Number(increment("Category_Inc")),
        Cat_Name: "Critical",
        Cat_Description: "Refers to high level incidents."
    },
    {
        _id: Number(increment("Category_Inc")),
        Cat_Name: "Moderate",
        Cat_Description: "Refers to low intermediate level incidents."
    },
    {
        _id: Number(increment("Category_Inc")),
        Cat_Name: "Slight",
        Cat_Description: "Refers to low level incidents."
    }
]);

//🪓🔎Injection of documents for Type_Inc collection 🔎🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}   
db.Type_Inc.insertMany([
    {
        _id: Number(increment("Type_Inc")),
        Typ_Name: "Software",
        Typ_Description: "Refers to incidents related to the software of the computers located in the classrooms."
    },
    {
        _id: Number(increment("Type_Inc")),
        Typ_Name: "Hardware",
        Typ_Description: "Refers to incidents related to the computers located in the classrooms."
    },
    {
        _id: Number(increment("Type_Inc")),
        Typ_Name: "Furniture",
        Typ_Description: "Refers to incidents related to furniture or elements inside the classrooms."
    },
    {
        _id: Number(increment("Type_Inc")),
        Typ_Name: "Infrastructure",
        Typ_Description: "Refers to incidents related to the infrastructure of the classrooms."
    }
]);

//🪓🔎Injection of documents for Comp_Status collection 🔎🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}   
db.Comp_Status.insertMany([
    {
        _id: Number(increment("Comp_Status")),
        Est_Name: "Damaged",
        Est_Description: "Refers to computers or peripherals that have any damage."
    },
    {
        _id: Number(increment("Comp_Status")),
        Est_Name: "Operative",
        Est_Description: "Refers to computers or peripherals that are currently operational and have no problems."
    },
    {
        _id: Number(increment("Comp_Status")),
        Est_Name: "Under maintenance",
        Est_Description: "Refers to computers or peripherals that are being checked and fixed."
    },
    {
        _id: Number(increment("Comp_Status")),
        Est_Name: "Out of service",
        Est_Description: "refers to computers or peripherals that are out of service."
    }
]);

//🪓🔎Injection of documents for document_type  collection 🔎🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}   
db.Document_type.insertMany([
    {
        _id: Number(increment("Document_type")),
        Doc_Name: "Identity Document",
        Doc_Abbreviation: "ID"
    },
    {
        _id: Number(increment("Document_type")),
        Doc_Name: "Passport",
        Doc_Abbreviation: "PP"
    },
    {
        _id: Number(increment("Document_type")),
        Doc_Name: "Driver's License",
        Doc_Abbreviation: "DL"
    },
]);

//🪓🔎Injection of documents for Gender  collection 🔎🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}   
db.Gender.insertMany([
    {
        _id: Number(increment("Gender")),
        Gen_Name: "Male",
        Gen_Abbreviation: "M"
    },
    {
        _id: Number(increment("Gender")),
        Gen_Name: "Female",
        Gen_Abbreviation: "F"
    },
    {
        _id: Number(increment("Gender")),
        Gen_Name: "Non-Binary",
        Gen_Abbreviation: "NB"
    },
]);

//🪓🔎Injection of documents for Classroom collection 🔎🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}
db.Classroom.insertMany([
    {
      _id: Number(increment("Classroom")),
      Sln_Name: "SkyLab",
      Sln_Description: "Programming classroom.",
      Sln_Areas: 1
    },
    {
        _id: Number(increment("Classroom")),
        Sln_Name: "Spunikt",
        Sln_Description: "High level programming classroom.",
        Sln_Areas: 1
    },
    {
        _id: Number(increment("Classroom")),
        Sln_Name: "Artemis",
        Sln_Description: "Intermediate level programming classroom.",
        Sln_Areas: 1
    },
    {
        _id: Number(increment("Classroom")),
        Sln_Name: "Apolo",
        Sln_Description: "Low level programming classroom.",
        Sln_Areas: 1
    },
    {
        _id: Number(increment("Classroom")),
        Sln_Name: "Corvus",
        Sln_Description: "Autonomous learning classroom 1.",
        Sln_Areas: 2
    },
    {
        _id: Number(increment("Classroom")),
        Sln_Name: "Endor",
        Sln_Description: "Autonomous learning classroom 2.",
        Sln_Areas: 3
    },
    {
        _id: Number(increment("Classroom")),
        Sln_Name: "Auditorium",
        Sln_Description: "Classroom for English and social skills classes.",
        Sln_Areas: 4
    }
]);

//🪓🈴Injection of documents for Computers and their Peripherals collection in skyLand 🈴🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}
for (let i = 1; i <= 28; i++) {
    let IdC = Number(increment("Computers"));
    let IdK = Number(increment("Keyboards"));
    let IdM = Number(increment("Mouses"));
    let IdD = Number(increment("Diadems_Gamers"));
    let IdS = Number(increment("Screens"));

    db.Computers.insertOne(
        {
            _id: `CP-${IdC}`,
            Cp_Brand: "Compumax",
            Cp_Status: 2,
            Cp_Description: `Compumax brand computer identified with the id "${IdC}" located in the skyLand classroom.`,
            Cp_Classroom: 1
        }
    );
    db.Keyboards.insertOne(
        {
            _id: `TC-${IdK}`,
            Tc_Brand: "Compumax",
            Tc_Status: 2,
            Tc_Description: `Compumax keyboard identified with the id "${IdK}" located on the computer "${IdC}" in the Skulab classroom.`,
            Tc_PC: `CP-${IdC}`
        }
    );
    db.Mouses.insertOne(
        {
            _id: `Mo-${IdM}`,
            Mo_Brand: "Compumax",
            Mo_Status: 2,
            Mo_Description: `Compumax mouse identified with the id "${IdM}" located on the computer "${IdC}" in the Skulab classroom.`,
            Mo_PC: `CP-${IdC}`
        }
    );
    db.Diadems_Gamers.insertOne(
        {
            _id: `Dg-${IdD}`,
            Dg_Brand: "Compumax",
            Dg_Status: 2,
            Dg_Description: `Compumax gamer headset identified with the id "${IdD}" located on the computer "${IdC}" in the Skulab classroom.`,
            Dg_PC: `CP-${IdC}`
        }
    );
    db.Screens.insertOne(
        {
            _id: `Pt-${IdS}`,
            Pt_Brand: "Compumax",
            Pt_Status: 2,
            Pt_Description: `Compumax Screen identified with the id "${IdS}" located on the computer "${IdC}" in the Skulab classroom.`,
            Pt_PC: `CP-${IdC}`
        }
    );
}


//🪓🈸Injection of documents for Computers and their Peripherals collection in Apolo 🈸🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}
for (let i = 1; i <= 32; i++) {
    let IdC = Number(increment("Computers"));
    let IdK = Number(increment("Keyboards"));
    let IdM = Number(increment("Mouses"));
    let IdD = Number(increment("Diadems_Gamers"));
    let IdS = Number(increment("Screens"));

    db.Computers.insertOne(
        {
            _id: `CP-${IdC}`,
            Cp_Brand: "Compumax",
            Cp_Status: 2,
            Cp_Description: `Compumax brand computer identified with the id "${IdC}" located in the Apolo classroom.`,
            Cp_Classroom: 4
        }
    );
    db.Keyboards.insertOne(
        {
            _id: `TC-${IdK}`,
            Tc_Brand: "Compumax",
            Tc_Status: 2,
            Tc_Description: `Compumax keyboard identified with the id "${IdK}" located on the computer "${IdC}" in the Apolo classroom.`,
            Tc_PC: `CP-${IdC}`
        }
    );
    db.Mouses.insertOne(
        {
            _id: `Mo-${IdM}`,
            Mo_Brand: "Compumax",
            Mo_Status: 2,
            Mo_Description: `Compumax mouse identified with the id "${IdM}" located on the computer "${IdC}" in the Apolo classroom.`,
            Mo_PC: `CP-${IdC}`
        }
    );
    db.Diadems_Gamers.insertOne(
        {
            _id: `Dg-${IdD}`,
            Dg_Brand: "Compumax",
            Dg_Status: 2,
            Dg_Description: `Compumax gamer headset identified with the id "${IdD}" located on the computer "${IdC}" in the Apolo classroom.`,
            Dg_PC: `CP-${IdC}`
        }
    );
    db.Screens.insertOne(
        {
            _id: `Pt-${IdS}`,
            Pt_Brand: "Compumax",
            Pt_Status: 2,
            Pt_Description: `Compumax Screen identified with the id "${IdS}" located on the computer "${IdC}" in the Apolo classroom.`,
            Pt_PC: `CP-${IdC}`
        }
    );
}

//🪓㊙️Injection of documents for Computers and their Peripherals collection in Artemis ㊙️🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}
for (let i = 1; i <= 31; i++) {
    let IdC = Number(increment("Computers"));
    let IdK = Number(increment("Keyboards"));
    let IdM = Number(increment("Mouses"));
    let IdD = Number(increment("Diadems_Gamers"));
    let IdS = Number(increment("Screens"));

    db.Computers.insertOne(
        {
            _id: `CP-${IdC}`,
            Cp_Brand: "Compumax",
            Cp_Status: 2,
            Cp_Description: `Compumax brand computer identified with the id "${IdC}" located in the Artemis classroom.`,
            Cp_Classroom: 3
        }
    );
    db.Keyboards.insertOne(
        {
            _id: `TC-${IdK}`,
            Tc_Brand: "Compumax",
            Tc_Status: 2,
            Tc_Description: `Compumax keyboard identified with the id "${IdK}" located on the computer "${IdC}" in the Artemis classroom.`,
            Tc_PC: `CP-${IdC}`
        }
    );
    db.Mouses.insertOne(
        {
            _id: `Mo-${IdM}`,
            Mo_Brand: "Compumax",
            Mo_Status: 2,
            Mo_Description: `Compumax mouse identified with the id "${IdM}" located on the computer "${IdC}" in the Artemis classroom.`,
            Mo_PC: `CP-${IdC}`
        }
    );
    db.Diadems_Gamers.insertOne(
        {
            _id: `Dg-${IdD}`,
            Dg_Brand: "Compumax",
            Dg_Status: 2,
            Dg_Description: `Compumax gamer headset identified with the id "${IdD}" located on the computer "${IdC}" in the Artemis classroom.`,
            Dg_PC: `CP-${IdC}`
        }
    );
    db.Screens.insertOne(
        {
            _id: `Pt-${IdS}`,
            Pt_Brand: "Compumax",
            Pt_Status: 2,
            Pt_Description: `Compumax Screen identified with the id "${IdS}" located on the computer "${IdC}" in the Artemis classroom.`,
            Pt_PC: `CP-${IdC}`
        }
    );
}

//🪓🈂️Injection of documents for Computers and their Peripherals collection in Spunikt 🈂️🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}
for (let i = 1; i <= 34; i++) {
    let IdC = Number(increment("Computers"));
    let IdK = Number(increment("Keyboards"));
    let IdM = Number(increment("Mouses"));
    let IdD = Number(increment("Diadems_Gamers"));
    let IdS = Number(increment("Screens"));

    db.Computers.insertOne(
        {
            _id: `CP-${IdC}`,
            Cp_Brand: "Compumax",
            Cp_Status: 2,
            Cp_Description: `Compumax brand computer identified with the id "${IdC}" located in the Spunikt classroom.`,
            Cp_Classroom: 2
        }
    );
    db.Keyboards.insertOne(
        {
            _id: `TC-${IdK}`,
            Tc_Brand: "Compumax",
            Tc_Status: 2,
            Tc_Description: `Compumax keyboard identified with the id "${IdK}" located on the computer "${IdC}" in the Spunikt classroom.`,
            Tc_PC: `CP-${IdC}`
        }
    );
    db.Mouses.insertOne(
        {
            _id: `Mo-${IdM}`,
            Mo_Brand: "Compumax",
            Mo_Status: 2,
            Mo_Description: `Compumax mouse identified with the id "${IdM}" located on the computer "${IdC}" in the Spunikt classroom.`,
            Mo_PC: `CP-${IdC}`
        }
    );
    db.Diadems_Gamers.insertOne(
        {
            _id: `Dg-${IdD}`,
            Dg_Brand: "Compumax",
            Dg_Status: 2,
            Dg_Description: `Compumax gamer headset identified with the id "${IdD}" located on the computer "${IdC}" in the Spunikt classroom.`,
            Dg_PC: `CP-${IdC}`
        }
    );
    db.Screens.insertOne(
        {
            _id: `Pt-${IdS}`,
            Pt_Brand: "Compumax",
            Pt_Status: 2,
            Pt_Description: `Compumax Screen identified with the id "${IdS}" located on the computer "${IdC}" in the Spunikt classroom.`,
            Pt_PC: `CP-${IdC}`
        }
    );
}

//🪓🈷️Injection of documents for Computers and their Peripherals collection in Corvus 🈷️🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}
for (let i = 1; i <= 29; i++) {
    let IdC = Number(increment("Computers"));
    let IdK = Number(increment("Keyboards"));
    let IdM = Number(increment("Mouses"));
    let IdD = Number(increment("Diadems_Gamers"));
    let IdS = Number(increment("Screens"));

    db.Computers.insertOne(
        {
            _id: `CP-${IdC}`,
            Cp_Brand: "Compumax",
            Cp_Status: 2,
            Cp_Description: `Compumax brand computer identified with the id "${IdC}" located in the Corvus classroom.`,
            Cp_Classroom: 5
        }
    );
    db.Keyboards.insertOne(
        {
            _id: `TC-${IdK}`,
            Tc_Brand: "Compumax",
            Tc_Status: 2,
            Tc_Description: `Compumax keyboard identified with the id "${IdK}" located on the computer "${IdC}" in the Corvus classroom.`,
            Tc_PC: `CP-${IdC}`
        }
    );
    db.Mouses.insertOne(
        {
            _id: `Mo-${IdM}`,
            Mo_Brand: "Compumax",
            Mo_Status: 2,
            Mo_Description: `Compumax mouse identified with the id "${IdM}" located on the computer "${IdC}" in the Corvus classroom.`,
            Mo_PC: `CP-${IdC}`
        }
    );
    db.Diadems_Gamers.insertOne(
        {
            _id: `Dg-${IdD}`,
            Dg_Brand: "Compumax",
            Dg_Status: 2,
            Dg_Description: `Compumax gamer headset identified with the id "${IdD}" located on the computer "${IdC}" in the Corvus classroom.`,
            Dg_PC: `CP-${IdC}`
        }
    );
    db.Screens.insertOne(
        {
            _id: `Pt-${IdS}`,
            Pt_Brand: "Compumax",
            Pt_Status: 2,
            Pt_Description: `Compumax Screen identified with the id "${IdS}" located on the computer "${IdC}" in the Corvus classroom.`,
            Pt_PC: `CP-${IdC}`
        }
    );
}

//🪓🉐Injection of documents for Computers and their Peripherals collection in Endor 🉐🪓

use("Campus_incidents");
function increment(coleccion) {
    const sequenceDocument = db.autoincrement.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return sequenceDocument.sequence_value;
}
for (let i = 1; i <= 31; i++) {
    let IdC = Number(increment("Computers"));
    let IdK = Number(increment("Keyboards"));
    let IdM = Number(increment("Mouses"));
    let IdD = Number(increment("Diadems_Gamers"));
    let IdS = Number(increment("Screens"));

    db.Computers.insertOne(
        {
            _id: `CP-${IdC}`,
            Cp_Brand: "Compumax",
            Cp_Status: 2,
            Cp_Description: `Compumax brand computer identified with the id "${IdC}" located in the Endor classroom.`,
            Cp_Classroom: 6
        }
    );
    db.Keyboards.insertOne(
        {
            _id: `TC-${IdK}`,
            Tc_Brand: "Compumax",
            Tc_Status: 2,
            Tc_Description: `Compumax keyboard identified with the id "${IdK}" located on the computer "${IdC}" in the Endor classroom.`,
            Tc_PC: `CP-${IdC}`
        }
    );
    db.Mouses.insertOne(
        {
            _id: `Mo-${IdM}`,
            Mo_Brand: "Compumax",
            Mo_Status: 2,
            Mo_Description: `Compumax mouse identified with the id "${IdM}" located on the computer "${IdC}" in the Endor classroom.`,
            Mo_PC: `CP-${IdC}`
        }
    );
    db.Diadems_Gamers.insertOne(
        {
            _id: `Dg-${IdD}`,
            Dg_Brand: "Compumax",
            Dg_Status: 2,
            Dg_Description: `Compumax gamer headset identified with the id "${IdD}" located on the computer "${IdC}" in the Endor classroom.`,
            Dg_PC: `CP-${IdC}`
        }
    );
    db.Screens.insertOne(
        {
            _id: `Pt-${IdS}`,
            Pt_Brand: "Compumax",
            Pt_Status: 2,
            Pt_Description: `Compumax Screen identified with the id "${IdS}" located on the computer "${IdC}" in the Endor classroom.`,
            Pt_PC: `CP-${IdC}`
        }
    );
}